// Code generated by Kitex v0.15.2. DO NOT EDIT.

package manage

import (
	"github.com/xh-polaris/innospark-idl/kitex_gen/basic"

	"github.com/cloudwego/prutal"
)

type AdminLoginReq struct {
	Account  string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (x *AdminLoginReq) Reset() { *x = AdminLoginReq{} }

func (x *AdminLoginReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *AdminLoginReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *AdminLoginReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AdminLoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AdminLoginResp struct {
	Resp  *basic.Response `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
	Token string          `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (x *AdminLoginResp) Reset() { *x = AdminLoginResp{} }

func (x *AdminLoginResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *AdminLoginResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *AdminLoginResp) GetResp() *basic.Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *AdminLoginResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type User struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Phone      string `protobuf:"bytes,2,opt,name=phone" json:"phone,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Avatar     string `protobuf:"bytes,4,opt,name=avatar" json:"avatar,omitempty"`
	Warnings   int32  `protobuf:"varint,5,opt,name=warnings" json:"warnings,omitempty"`
	Status     int32  `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
	Expire     int64  `protobuf:"varint,7,opt,name=expire" json:"expire,omitempty"`
	LoginTime  int64  `protobuf:"varint,8,opt,name=loginTime" json:"loginTime,omitempty"`
	CreateTime int64  `protobuf:"varint,9,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime int64  `protobuf:"varint,10,opt,name=updateTime" json:"updateTime,omitempty"`
}

func (x *User) Reset() { *x = User{} }

func (x *User) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *User) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *User) GetWarnings() int32 {
	if x != nil {
		return x.Warnings
	}
	return 0
}

func (x *User) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *User) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *User) GetLoginTime() int64 {
	if x != nil {
		return x.LoginTime
	}
	return 0
}

func (x *User) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *User) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type ListUserReq struct {
	Page     *basic.Page `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
	Status   int32       `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	SortedBy int32       `protobuf:"varint,3,opt,name=sortedBy" json:"sortedBy,omitempty"`
	Reverse  int32       `protobuf:"varint,4,opt,name=reverse" json:"reverse,omitempty"`
}

func (x *ListUserReq) Reset() { *x = ListUserReq{} }

func (x *ListUserReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListUserReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListUserReq) GetPage() *basic.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListUserReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListUserReq) GetSortedBy() int32 {
	if x != nil {
		return x.SortedBy
	}
	return 0
}

func (x *ListUserReq) GetReverse() int32 {
	if x != nil {
		return x.Reverse
	}
	return 0
}

type ListUserResp struct {
	Resp  *basic.Response `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
	Total int64           `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	User  []*User         `protobuf:"bytes,3,rep,name=user" json:"user,omitempty"`
}

func (x *ListUserResp) Reset() { *x = ListUserResp{} }

func (x *ListUserResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListUserResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListUserResp) GetResp() *basic.Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *ListUserResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListUserResp) GetUser() []*User {
	if x != nil {
		return x.User
	}
	return nil
}

type ForbiddenUserReq struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"` // normal:0 forbidden:1
	Expire *int64 `protobuf:"varint,3,opt,name=expire" json:"expire,omitempty"`
}

func (x *ForbiddenUserReq) Reset() { *x = ForbiddenUserReq{} }

func (x *ForbiddenUserReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ForbiddenUserReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ForbiddenUserReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ForbiddenUserReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ForbiddenUserReq) GetExpire() int64 {
	if x != nil && x.Expire != nil {
		return *x.Expire
	}
	return 0
}

type ForbiddenUserResp struct {
	Resp *basic.Response `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
}

func (x *ForbiddenUserResp) Reset() { *x = ForbiddenUserResp{} }

func (x *ForbiddenUserResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ForbiddenUserResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ForbiddenUserResp) GetResp() *basic.Response {
	if x != nil {
		return x.Resp
	}
	return nil
}
