// Code generated by Kitex v0.15.2. DO NOT EDIT.

package manageapi

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "github.com/cloudwego/prutal"
	core_api "github.com/xh-polaris/innospark-idl/kitex_gen/core_api"
	manage "github.com/xh-polaris/innospark-idl/kitex_gen/manage"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"AdminLogin": kitex.NewMethodInfo(
		adminLoginHandler,
		newAdminLoginArgs,
		newAdminLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListUser": kitex.NewMethodInfo(
		listUserHandler,
		newListUserArgs,
		newListUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Forbidden": kitex.NewMethodInfo(
		forbiddenHandler,
		newForbiddenArgs,
		newForbiddenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	manageApiServiceInfo                = NewServiceInfo()
	manageApiServiceInfoForClient       = NewServiceInfoForClient()
	manageApiServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return manageApiServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return manageApiServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return manageApiServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ManageApi"
	handlerType := (*core_api.ManageApi)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.15.2",
		Extra:           extra,
	}
	return svcInfo
}

func adminLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(manage.AdminLoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.ManageApi).AdminLogin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AdminLoginArgs:
		success, err := handler.(core_api.ManageApi).AdminLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AdminLoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAdminLoginArgs() interface{} {
	return &AdminLoginArgs{}
}

func newAdminLoginResult() interface{} {
	return &AdminLoginResult{}
}

type AdminLoginArgs struct {
	Req *manage.AdminLoginReq
}

func (p *AdminLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AdminLoginArgs) Unmarshal(in []byte) error {
	msg := new(manage.AdminLoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AdminLoginArgs_Req_DEFAULT *manage.AdminLoginReq

func (p *AdminLoginArgs) GetReq() *manage.AdminLoginReq {
	if !p.IsSetReq() {
		return AdminLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AdminLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AdminLoginResult struct {
	Success *manage.AdminLoginResp
}

var AdminLoginResult_Success_DEFAULT *manage.AdminLoginResp

func (p *AdminLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AdminLoginResult) Unmarshal(in []byte) error {
	msg := new(manage.AdminLoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AdminLoginResult) GetSuccess() *manage.AdminLoginResp {
	if !p.IsSetSuccess() {
		return AdminLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdminLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*manage.AdminLoginResp)
}

func (p *AdminLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminLoginResult) GetResult() interface{} {
	return p.Success
}

func listUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(manage.ListUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.ManageApi).ListUser(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListUserArgs:
		success, err := handler.(core_api.ManageApi).ListUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListUserResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListUserArgs() interface{} {
	return &ListUserArgs{}
}

func newListUserResult() interface{} {
	return &ListUserResult{}
}

type ListUserArgs struct {
	Req *manage.ListUserReq
}

func (p *ListUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListUserArgs) Unmarshal(in []byte) error {
	msg := new(manage.ListUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListUserArgs_Req_DEFAULT *manage.ListUserReq

func (p *ListUserArgs) GetReq() *manage.ListUserReq {
	if !p.IsSetReq() {
		return ListUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListUserResult struct {
	Success *manage.ListUserResp
}

var ListUserResult_Success_DEFAULT *manage.ListUserResp

func (p *ListUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListUserResult) Unmarshal(in []byte) error {
	msg := new(manage.ListUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListUserResult) GetSuccess() *manage.ListUserResp {
	if !p.IsSetSuccess() {
		return ListUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*manage.ListUserResp)
}

func (p *ListUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListUserResult) GetResult() interface{} {
	return p.Success
}

func forbiddenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(manage.ForbiddenUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.ManageApi).Forbidden(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ForbiddenArgs:
		success, err := handler.(core_api.ManageApi).Forbidden(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ForbiddenResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newForbiddenArgs() interface{} {
	return &ForbiddenArgs{}
}

func newForbiddenResult() interface{} {
	return &ForbiddenResult{}
}

type ForbiddenArgs struct {
	Req *manage.ForbiddenUserReq
}

func (p *ForbiddenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ForbiddenArgs) Unmarshal(in []byte) error {
	msg := new(manage.ForbiddenUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ForbiddenArgs_Req_DEFAULT *manage.ForbiddenUserReq

func (p *ForbiddenArgs) GetReq() *manage.ForbiddenUserReq {
	if !p.IsSetReq() {
		return ForbiddenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ForbiddenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ForbiddenArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ForbiddenResult struct {
	Success *manage.ForbiddenUserResp
}

var ForbiddenResult_Success_DEFAULT *manage.ForbiddenUserResp

func (p *ForbiddenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ForbiddenResult) Unmarshal(in []byte) error {
	msg := new(manage.ForbiddenUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ForbiddenResult) GetSuccess() *manage.ForbiddenUserResp {
	if !p.IsSetSuccess() {
		return ForbiddenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ForbiddenResult) SetSuccess(x interface{}) {
	p.Success = x.(*manage.ForbiddenUserResp)
}

func (p *ForbiddenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ForbiddenResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AdminLogin(ctx context.Context, Req *manage.AdminLoginReq) (r *manage.AdminLoginResp, err error) {
	var _args AdminLoginArgs
	_args.Req = Req
	var _result AdminLoginResult
	if err = p.c.Call(ctx, "AdminLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListUser(ctx context.Context, Req *manage.ListUserReq) (r *manage.ListUserResp, err error) {
	var _args ListUserArgs
	_args.Req = Req
	var _result ListUserResult
	if err = p.c.Call(ctx, "ListUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Forbidden(ctx context.Context, Req *manage.ForbiddenUserReq) (r *manage.ForbiddenUserResp, err error) {
	var _args ForbiddenArgs
	_args.Req = Req
	var _result ForbiddenResult
	if err = p.c.Call(ctx, "Forbidden", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
