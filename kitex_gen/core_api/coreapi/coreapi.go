// Code generated by Kitex v0.14.1. DO NOT EDIT.

package coreapi

import (
	"context"
	"errors"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "github.com/cloudwego/prutal"
	basic "github.com/xh-polaris/innospark-idl/kitex_gen/basic"
	core_api "github.com/xh-polaris/innospark-idl/kitex_gen/core_api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Completions": kitex.NewMethodInfo(
		completionsHandler,
		newCompletionsArgs,
		newCompletionsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
	"CreateConversation": kitex.NewMethodInfo(
		createConversationHandler,
		newCreateConversationArgs,
		newCreateConversationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListConversation": kitex.NewMethodInfo(
		listConversationHandler,
		newListConversationArgs,
		newListConversationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetConversation": kitex.NewMethodInfo(
		getConversationHandler,
		newGetConversationArgs,
		newGetConversationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RenameConversation": kitex.NewMethodInfo(
		renameConversationHandler,
		newRenameConversationArgs,
		newRenameConversationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListAgents": kitex.NewMethodInfo(
		listAgentsHandler,
		newListAgentsArgs,
		newListAgentsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Feedback": kitex.NewMethodInfo(
		feedbackHandler,
		newFeedbackArgs,
		newFeedbackResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	coreApiServiceInfo                = NewServiceInfo()
	coreApiServiceInfoForClient       = NewServiceInfoForClient()
	coreApiServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return coreApiServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return coreApiServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return coreApiServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CoreApi"
	handlerType := (*core_api.CoreApi)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.14.1",
		Extra:           extra,
	}
	return svcInfo
}

func completionsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	streamingArgs, ok := arg.(*streaming.Args)
	if !ok {
		return errInvalidMessageType
	}
	st := streamingArgs.Stream
	stream := &coreApiCompletionsServer{st}
	req := new(core_api.CompletionsReq)
	if err := st.RecvMsg(req); err != nil {
		return err
	}
	return handler.(core_api.CoreApi).Completions(req, stream)
}

type coreApiCompletionsClient struct {
	streaming.Stream
}

func (x *coreApiCompletionsClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *coreApiCompletionsClient) Recv() (*core_api.SSEEvent, error) {
	m := new(core_api.SSEEvent)
	return m, x.Stream.RecvMsg(m)
}

type coreApiCompletionsServer struct {
	streaming.Stream
}

func (x *coreApiCompletionsServer) Send(m *core_api.SSEEvent) error {
	return x.Stream.SendMsg(m)
}

func newCompletionsArgs() interface{} {
	return &CompletionsArgs{}
}

func newCompletionsResult() interface{} {
	return &CompletionsResult{}
}

type CompletionsArgs struct {
	Req *core_api.CompletionsReq
}

func (p *CompletionsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CompletionsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CompletionsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CompletionsArgs_Req_DEFAULT *core_api.CompletionsReq

func (p *CompletionsArgs) GetReq() *core_api.CompletionsReq {
	if !p.IsSetReq() {
		return CompletionsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CompletionsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CompletionsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CompletionsResult struct {
	Success *core_api.SSEEvent
}

var CompletionsResult_Success_DEFAULT *core_api.SSEEvent

func (p *CompletionsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CompletionsResult) Unmarshal(in []byte) error {
	msg := new(core_api.SSEEvent)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CompletionsResult) GetSuccess() *core_api.SSEEvent {
	if !p.IsSetSuccess() {
		return CompletionsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CompletionsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SSEEvent)
}

func (p *CompletionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CompletionsResult) GetResult() interface{} {
	return p.Success
}

func createConversationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateConversationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).CreateConversation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateConversationArgs:
		success, err := handler.(core_api.CoreApi).CreateConversation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateConversationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateConversationArgs() interface{} {
	return &CreateConversationArgs{}
}

func newCreateConversationResult() interface{} {
	return &CreateConversationResult{}
}

type CreateConversationArgs struct {
	Req *core_api.CreateConversationReq
}

func (p *CreateConversationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateConversationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateConversationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateConversationArgs_Req_DEFAULT *core_api.CreateConversationReq

func (p *CreateConversationArgs) GetReq() *core_api.CreateConversationReq {
	if !p.IsSetReq() {
		return CreateConversationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateConversationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateConversationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateConversationResult struct {
	Success *core_api.CreateConversationResp
}

var CreateConversationResult_Success_DEFAULT *core_api.CreateConversationResp

func (p *CreateConversationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateConversationResult) Unmarshal(in []byte) error {
	msg := new(core_api.CreateConversationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateConversationResult) GetSuccess() *core_api.CreateConversationResp {
	if !p.IsSetSuccess() {
		return CreateConversationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateConversationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CreateConversationResp)
}

func (p *CreateConversationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateConversationResult) GetResult() interface{} {
	return p.Success
}

func listConversationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListConversationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).ListConversation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListConversationArgs:
		success, err := handler.(core_api.CoreApi).ListConversation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListConversationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListConversationArgs() interface{} {
	return &ListConversationArgs{}
}

func newListConversationResult() interface{} {
	return &ListConversationResult{}
}

type ListConversationArgs struct {
	Req *core_api.ListConversationReq
}

func (p *ListConversationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListConversationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListConversationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListConversationArgs_Req_DEFAULT *core_api.ListConversationReq

func (p *ListConversationArgs) GetReq() *core_api.ListConversationReq {
	if !p.IsSetReq() {
		return ListConversationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListConversationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListConversationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListConversationResult struct {
	Success *core_api.ListConversationResp
}

var ListConversationResult_Success_DEFAULT *core_api.ListConversationResp

func (p *ListConversationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListConversationResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListConversationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListConversationResult) GetSuccess() *core_api.ListConversationResp {
	if !p.IsSetSuccess() {
		return ListConversationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListConversationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListConversationResp)
}

func (p *ListConversationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListConversationResult) GetResult() interface{} {
	return p.Success
}

func getConversationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetConversationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).GetConversation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetConversationArgs:
		success, err := handler.(core_api.CoreApi).GetConversation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetConversationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetConversationArgs() interface{} {
	return &GetConversationArgs{}
}

func newGetConversationResult() interface{} {
	return &GetConversationResult{}
}

type GetConversationArgs struct {
	Req *core_api.GetConversationReq
}

func (p *GetConversationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetConversationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetConversationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetConversationArgs_Req_DEFAULT *core_api.GetConversationReq

func (p *GetConversationArgs) GetReq() *core_api.GetConversationReq {
	if !p.IsSetReq() {
		return GetConversationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetConversationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetConversationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetConversationResult struct {
	Success *core_api.GetConversationResp
}

var GetConversationResult_Success_DEFAULT *core_api.GetConversationResp

func (p *GetConversationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetConversationResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetConversationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetConversationResult) GetSuccess() *core_api.GetConversationResp {
	if !p.IsSetSuccess() {
		return GetConversationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetConversationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetConversationResp)
}

func (p *GetConversationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetConversationResult) GetResult() interface{} {
	return p.Success
}

func renameConversationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.RenameConversationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).RenameConversation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RenameConversationArgs:
		success, err := handler.(core_api.CoreApi).RenameConversation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RenameConversationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRenameConversationArgs() interface{} {
	return &RenameConversationArgs{}
}

func newRenameConversationResult() interface{} {
	return &RenameConversationResult{}
}

type RenameConversationArgs struct {
	Req *core_api.RenameConversationReq
}

func (p *RenameConversationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RenameConversationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.RenameConversationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RenameConversationArgs_Req_DEFAULT *core_api.RenameConversationReq

func (p *RenameConversationArgs) GetReq() *core_api.RenameConversationReq {
	if !p.IsSetReq() {
		return RenameConversationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RenameConversationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RenameConversationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RenameConversationResult struct {
	Success *core_api.RenameConversationResp
}

var RenameConversationResult_Success_DEFAULT *core_api.RenameConversationResp

func (p *RenameConversationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RenameConversationResult) Unmarshal(in []byte) error {
	msg := new(core_api.RenameConversationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RenameConversationResult) GetSuccess() *core_api.RenameConversationResp {
	if !p.IsSetSuccess() {
		return RenameConversationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RenameConversationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.RenameConversationResp)
}

func (p *RenameConversationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RenameConversationResult) GetResult() interface{} {
	return p.Success
}

func listAgentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListAgentsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).ListAgents(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListAgentsArgs:
		success, err := handler.(core_api.CoreApi).ListAgents(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListAgentsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListAgentsArgs() interface{} {
	return &ListAgentsArgs{}
}

func newListAgentsResult() interface{} {
	return &ListAgentsResult{}
}

type ListAgentsArgs struct {
	Req *core_api.ListAgentsReq
}

func (p *ListAgentsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListAgentsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListAgentsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListAgentsArgs_Req_DEFAULT *core_api.ListAgentsReq

func (p *ListAgentsArgs) GetReq() *core_api.ListAgentsReq {
	if !p.IsSetReq() {
		return ListAgentsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListAgentsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListAgentsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListAgentsResult struct {
	Success *core_api.ListAgentsResp
}

var ListAgentsResult_Success_DEFAULT *core_api.ListAgentsResp

func (p *ListAgentsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListAgentsResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListAgentsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListAgentsResult) GetSuccess() *core_api.ListAgentsResp {
	if !p.IsSetSuccess() {
		return ListAgentsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListAgentsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListAgentsResp)
}

func (p *ListAgentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListAgentsResult) GetResult() interface{} {
	return p.Success
}

func feedbackHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.FeedbackReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).Feedback(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FeedbackArgs:
		success, err := handler.(core_api.CoreApi).Feedback(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FeedbackResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFeedbackArgs() interface{} {
	return &FeedbackArgs{}
}

func newFeedbackResult() interface{} {
	return &FeedbackResult{}
}

type FeedbackArgs struct {
	Req *core_api.FeedbackReq
}

func (p *FeedbackArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FeedbackArgs) Unmarshal(in []byte) error {
	msg := new(core_api.FeedbackReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FeedbackArgs_Req_DEFAULT *core_api.FeedbackReq

func (p *FeedbackArgs) GetReq() *core_api.FeedbackReq {
	if !p.IsSetReq() {
		return FeedbackArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FeedbackArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FeedbackArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FeedbackResult struct {
	Success *basic.Response
}

var FeedbackResult_Success_DEFAULT *basic.Response

func (p *FeedbackResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FeedbackResult) Unmarshal(in []byte) error {
	msg := new(basic.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FeedbackResult) GetSuccess() *basic.Response {
	if !p.IsSetSuccess() {
		return FeedbackResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FeedbackResult) SetSuccess(x interface{}) {
	p.Success = x.(*basic.Response)
}

func (p *FeedbackResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FeedbackResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Completions(ctx context.Context, req *core_api.CompletionsReq) (CoreApi_CompletionsClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "Completions", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &coreApiCompletionsClient{res.Stream}

	if err := stream.Stream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}

func (p *kClient) CreateConversation(ctx context.Context, Req *core_api.CreateConversationReq) (r *core_api.CreateConversationResp, err error) {
	var _args CreateConversationArgs
	_args.Req = Req
	var _result CreateConversationResult
	if err = p.c.Call(ctx, "CreateConversation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListConversation(ctx context.Context, Req *core_api.ListConversationReq) (r *core_api.ListConversationResp, err error) {
	var _args ListConversationArgs
	_args.Req = Req
	var _result ListConversationResult
	if err = p.c.Call(ctx, "ListConversation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetConversation(ctx context.Context, Req *core_api.GetConversationReq) (r *core_api.GetConversationResp, err error) {
	var _args GetConversationArgs
	_args.Req = Req
	var _result GetConversationResult
	if err = p.c.Call(ctx, "GetConversation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RenameConversation(ctx context.Context, Req *core_api.RenameConversationReq) (r *core_api.RenameConversationResp, err error) {
	var _args RenameConversationArgs
	_args.Req = Req
	var _result RenameConversationResult
	if err = p.c.Call(ctx, "RenameConversation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListAgents(ctx context.Context, Req *core_api.ListAgentsReq) (r *core_api.ListAgentsResp, err error) {
	var _args ListAgentsArgs
	_args.Req = Req
	var _result ListAgentsResult
	if err = p.c.Call(ctx, "ListAgents", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Feedback(ctx context.Context, Req *core_api.FeedbackReq) (r *basic.Response, err error) {
	var _args FeedbackArgs
	_args.Req = Req
	var _result FeedbackResult
	if err = p.c.Call(ctx, "Feedback", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
