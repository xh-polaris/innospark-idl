// Code generated by Kitex v0.15.2. DO NOT EDIT.

package coreapi

import (
	"context"
	"errors"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "github.com/cloudwego/prutal"
	core_api "github.com/xh-polaris/innospark-idl/kitex_gen/core_api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Completions": kitex.NewMethodInfo(
		completionsHandler,
		newCompletionsArgs,
		newCompletionsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
	"CreateConversation": kitex.NewMethodInfo(
		createConversationHandler,
		newCreateConversationArgs,
		newCreateConversationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListConversation": kitex.NewMethodInfo(
		listConversationHandler,
		newListConversationArgs,
		newListConversationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetConversation": kitex.NewMethodInfo(
		getConversationHandler,
		newGetConversationArgs,
		newGetConversationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Generate": kitex.NewMethodInfo(
		generateHandler,
		newGenerateArgs,
		newGenerateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RenameConversation": kitex.NewMethodInfo(
		renameConversationHandler,
		newRenameConversationArgs,
		newRenameConversationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteConversation": kitex.NewMethodInfo(
		deleteConversationHandler,
		newDeleteConversationArgs,
		newDeleteConversationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SearchConversation": kitex.NewMethodInfo(
		searchConversationHandler,
		newSearchConversationArgs,
		newSearchConversationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListAgents": kitex.NewMethodInfo(
		listAgentsHandler,
		newListAgentsArgs,
		newListAgentsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Feedback": kitex.NewMethodInfo(
		feedbackHandler,
		newFeedbackArgs,
		newFeedbackResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"FeedbackContent": kitex.NewMethodInfo(
		feedbackContentHandler,
		newFeedbackContentArgs,
		newFeedbackContentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SendVerifyCode": kitex.NewMethodInfo(
		sendVerifyCodeHandler,
		newSendVerifyCodeArgs,
		newSendVerifyCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"BasicUserRegister": kitex.NewMethodInfo(
		basicUserRegisterHandler,
		newBasicUserRegisterArgs,
		newBasicUserRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"BasicUserLogin": kitex.NewMethodInfo(
		basicUserLoginHandler,
		newBasicUserLoginArgs,
		newBasicUserLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"BasicUserResetPassword": kitex.NewMethodInfo(
		basicUserResetPasswordHandler,
		newBasicUserResetPasswordArgs,
		newBasicUserResetPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"BasicUserUpdateProfile": kitex.NewMethodInfo(
		basicUserUpdateProfileHandler,
		newBasicUserUpdateProfileArgs,
		newBasicUserUpdateProfileResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ThirdPartyLogin": kitex.NewMethodInfo(
		thirdPartyLoginHandler,
		newThirdPartyLoginArgs,
		newThirdPartyLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	coreApiServiceInfo                = NewServiceInfo()
	coreApiServiceInfoForClient       = NewServiceInfoForClient()
	coreApiServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return coreApiServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return coreApiServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return coreApiServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CoreApi"
	handlerType := (*core_api.CoreApi)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.15.2",
		Extra:           extra,
	}
	return svcInfo
}

func completionsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	streamingArgs, ok := arg.(*streaming.Args)
	if !ok {
		return errInvalidMessageType
	}
	st := streamingArgs.Stream
	stream := &coreApiCompletionsServer{st}
	req := new(core_api.CompletionsReq)
	if err := st.RecvMsg(req); err != nil {
		return err
	}
	return handler.(core_api.CoreApi).Completions(req, stream)
}

type coreApiCompletionsClient struct {
	streaming.Stream
}

func (x *coreApiCompletionsClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *coreApiCompletionsClient) Recv() (*core_api.SSEEvent, error) {
	m := new(core_api.SSEEvent)
	return m, x.Stream.RecvMsg(m)
}

type coreApiCompletionsServer struct {
	streaming.Stream
}

func (x *coreApiCompletionsServer) Send(m *core_api.SSEEvent) error {
	return x.Stream.SendMsg(m)
}

func newCompletionsArgs() interface{} {
	return &CompletionsArgs{}
}

func newCompletionsResult() interface{} {
	return &CompletionsResult{}
}

type CompletionsArgs struct {
	Req *core_api.CompletionsReq
}

func (p *CompletionsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CompletionsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CompletionsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CompletionsArgs_Req_DEFAULT *core_api.CompletionsReq

func (p *CompletionsArgs) GetReq() *core_api.CompletionsReq {
	if !p.IsSetReq() {
		return CompletionsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CompletionsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CompletionsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CompletionsResult struct {
	Success *core_api.SSEEvent
}

var CompletionsResult_Success_DEFAULT *core_api.SSEEvent

func (p *CompletionsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CompletionsResult) Unmarshal(in []byte) error {
	msg := new(core_api.SSEEvent)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CompletionsResult) GetSuccess() *core_api.SSEEvent {
	if !p.IsSetSuccess() {
		return CompletionsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CompletionsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SSEEvent)
}

func (p *CompletionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CompletionsResult) GetResult() interface{} {
	return p.Success
}

func createConversationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateConversationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).CreateConversation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateConversationArgs:
		success, err := handler.(core_api.CoreApi).CreateConversation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateConversationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateConversationArgs() interface{} {
	return &CreateConversationArgs{}
}

func newCreateConversationResult() interface{} {
	return &CreateConversationResult{}
}

type CreateConversationArgs struct {
	Req *core_api.CreateConversationReq
}

func (p *CreateConversationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateConversationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateConversationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateConversationArgs_Req_DEFAULT *core_api.CreateConversationReq

func (p *CreateConversationArgs) GetReq() *core_api.CreateConversationReq {
	if !p.IsSetReq() {
		return CreateConversationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateConversationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateConversationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateConversationResult struct {
	Success *core_api.CreateConversationResp
}

var CreateConversationResult_Success_DEFAULT *core_api.CreateConversationResp

func (p *CreateConversationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateConversationResult) Unmarshal(in []byte) error {
	msg := new(core_api.CreateConversationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateConversationResult) GetSuccess() *core_api.CreateConversationResp {
	if !p.IsSetSuccess() {
		return CreateConversationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateConversationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CreateConversationResp)
}

func (p *CreateConversationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateConversationResult) GetResult() interface{} {
	return p.Success
}

func listConversationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListConversationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).ListConversation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListConversationArgs:
		success, err := handler.(core_api.CoreApi).ListConversation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListConversationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListConversationArgs() interface{} {
	return &ListConversationArgs{}
}

func newListConversationResult() interface{} {
	return &ListConversationResult{}
}

type ListConversationArgs struct {
	Req *core_api.ListConversationReq
}

func (p *ListConversationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListConversationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListConversationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListConversationArgs_Req_DEFAULT *core_api.ListConversationReq

func (p *ListConversationArgs) GetReq() *core_api.ListConversationReq {
	if !p.IsSetReq() {
		return ListConversationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListConversationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListConversationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListConversationResult struct {
	Success *core_api.ListConversationResp
}

var ListConversationResult_Success_DEFAULT *core_api.ListConversationResp

func (p *ListConversationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListConversationResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListConversationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListConversationResult) GetSuccess() *core_api.ListConversationResp {
	if !p.IsSetSuccess() {
		return ListConversationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListConversationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListConversationResp)
}

func (p *ListConversationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListConversationResult) GetResult() interface{} {
	return p.Success
}

func getConversationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetConversationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).GetConversation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetConversationArgs:
		success, err := handler.(core_api.CoreApi).GetConversation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetConversationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetConversationArgs() interface{} {
	return &GetConversationArgs{}
}

func newGetConversationResult() interface{} {
	return &GetConversationResult{}
}

type GetConversationArgs struct {
	Req *core_api.GetConversationReq
}

func (p *GetConversationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetConversationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetConversationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetConversationArgs_Req_DEFAULT *core_api.GetConversationReq

func (p *GetConversationArgs) GetReq() *core_api.GetConversationReq {
	if !p.IsSetReq() {
		return GetConversationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetConversationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetConversationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetConversationResult struct {
	Success *core_api.GetConversationResp
}

var GetConversationResult_Success_DEFAULT *core_api.GetConversationResp

func (p *GetConversationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetConversationResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetConversationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetConversationResult) GetSuccess() *core_api.GetConversationResp {
	if !p.IsSetSuccess() {
		return GetConversationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetConversationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetConversationResp)
}

func (p *GetConversationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetConversationResult) GetResult() interface{} {
	return p.Success
}

func generateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GenerateBriefReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).Generate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GenerateArgs:
		success, err := handler.(core_api.CoreApi).Generate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GenerateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGenerateArgs() interface{} {
	return &GenerateArgs{}
}

func newGenerateResult() interface{} {
	return &GenerateResult{}
}

type GenerateArgs struct {
	Req *core_api.GenerateBriefReq
}

func (p *GenerateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GenerateArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GenerateBriefReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GenerateArgs_Req_DEFAULT *core_api.GenerateBriefReq

func (p *GenerateArgs) GetReq() *core_api.GenerateBriefReq {
	if !p.IsSetReq() {
		return GenerateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GenerateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GenerateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GenerateResult struct {
	Success *core_api.GenerateBriefResp
}

var GenerateResult_Success_DEFAULT *core_api.GenerateBriefResp

func (p *GenerateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GenerateResult) Unmarshal(in []byte) error {
	msg := new(core_api.GenerateBriefResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GenerateResult) GetSuccess() *core_api.GenerateBriefResp {
	if !p.IsSetSuccess() {
		return GenerateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GenerateResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GenerateBriefResp)
}

func (p *GenerateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenerateResult) GetResult() interface{} {
	return p.Success
}

func renameConversationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.RenameConversationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).RenameConversation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RenameConversationArgs:
		success, err := handler.(core_api.CoreApi).RenameConversation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RenameConversationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRenameConversationArgs() interface{} {
	return &RenameConversationArgs{}
}

func newRenameConversationResult() interface{} {
	return &RenameConversationResult{}
}

type RenameConversationArgs struct {
	Req *core_api.RenameConversationReq
}

func (p *RenameConversationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RenameConversationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.RenameConversationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RenameConversationArgs_Req_DEFAULT *core_api.RenameConversationReq

func (p *RenameConversationArgs) GetReq() *core_api.RenameConversationReq {
	if !p.IsSetReq() {
		return RenameConversationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RenameConversationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RenameConversationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RenameConversationResult struct {
	Success *core_api.RenameConversationResp
}

var RenameConversationResult_Success_DEFAULT *core_api.RenameConversationResp

func (p *RenameConversationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RenameConversationResult) Unmarshal(in []byte) error {
	msg := new(core_api.RenameConversationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RenameConversationResult) GetSuccess() *core_api.RenameConversationResp {
	if !p.IsSetSuccess() {
		return RenameConversationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RenameConversationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.RenameConversationResp)
}

func (p *RenameConversationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RenameConversationResult) GetResult() interface{} {
	return p.Success
}

func deleteConversationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteConversationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).DeleteConversation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteConversationArgs:
		success, err := handler.(core_api.CoreApi).DeleteConversation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteConversationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteConversationArgs() interface{} {
	return &DeleteConversationArgs{}
}

func newDeleteConversationResult() interface{} {
	return &DeleteConversationResult{}
}

type DeleteConversationArgs struct {
	Req *core_api.DeleteConversationReq
}

func (p *DeleteConversationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteConversationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteConversationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteConversationArgs_Req_DEFAULT *core_api.DeleteConversationReq

func (p *DeleteConversationArgs) GetReq() *core_api.DeleteConversationReq {
	if !p.IsSetReq() {
		return DeleteConversationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteConversationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteConversationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteConversationResult struct {
	Success *core_api.DeleteConversationResp
}

var DeleteConversationResult_Success_DEFAULT *core_api.DeleteConversationResp

func (p *DeleteConversationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteConversationResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteConversationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteConversationResult) GetSuccess() *core_api.DeleteConversationResp {
	if !p.IsSetSuccess() {
		return DeleteConversationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteConversationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteConversationResp)
}

func (p *DeleteConversationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteConversationResult) GetResult() interface{} {
	return p.Success
}

func searchConversationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SearchConversationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).SearchConversation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SearchConversationArgs:
		success, err := handler.(core_api.CoreApi).SearchConversation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchConversationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSearchConversationArgs() interface{} {
	return &SearchConversationArgs{}
}

func newSearchConversationResult() interface{} {
	return &SearchConversationResult{}
}

type SearchConversationArgs struct {
	Req *core_api.SearchConversationReq
}

func (p *SearchConversationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchConversationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SearchConversationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchConversationArgs_Req_DEFAULT *core_api.SearchConversationReq

func (p *SearchConversationArgs) GetReq() *core_api.SearchConversationReq {
	if !p.IsSetReq() {
		return SearchConversationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchConversationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchConversationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchConversationResult struct {
	Success *core_api.SearchConversationResp
}

var SearchConversationResult_Success_DEFAULT *core_api.SearchConversationResp

func (p *SearchConversationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchConversationResult) Unmarshal(in []byte) error {
	msg := new(core_api.SearchConversationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchConversationResult) GetSuccess() *core_api.SearchConversationResp {
	if !p.IsSetSuccess() {
		return SearchConversationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchConversationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SearchConversationResp)
}

func (p *SearchConversationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchConversationResult) GetResult() interface{} {
	return p.Success
}

func listAgentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListAgentsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).ListAgents(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListAgentsArgs:
		success, err := handler.(core_api.CoreApi).ListAgents(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListAgentsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListAgentsArgs() interface{} {
	return &ListAgentsArgs{}
}

func newListAgentsResult() interface{} {
	return &ListAgentsResult{}
}

type ListAgentsArgs struct {
	Req *core_api.ListAgentsReq
}

func (p *ListAgentsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListAgentsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListAgentsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListAgentsArgs_Req_DEFAULT *core_api.ListAgentsReq

func (p *ListAgentsArgs) GetReq() *core_api.ListAgentsReq {
	if !p.IsSetReq() {
		return ListAgentsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListAgentsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListAgentsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListAgentsResult struct {
	Success *core_api.ListAgentsResp
}

var ListAgentsResult_Success_DEFAULT *core_api.ListAgentsResp

func (p *ListAgentsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListAgentsResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListAgentsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListAgentsResult) GetSuccess() *core_api.ListAgentsResp {
	if !p.IsSetSuccess() {
		return ListAgentsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListAgentsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListAgentsResp)
}

func (p *ListAgentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListAgentsResult) GetResult() interface{} {
	return p.Success
}

func feedbackHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.FeedbackReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).Feedback(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FeedbackArgs:
		success, err := handler.(core_api.CoreApi).Feedback(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FeedbackResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFeedbackArgs() interface{} {
	return &FeedbackArgs{}
}

func newFeedbackResult() interface{} {
	return &FeedbackResult{}
}

type FeedbackArgs struct {
	Req *core_api.FeedbackReq
}

func (p *FeedbackArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FeedbackArgs) Unmarshal(in []byte) error {
	msg := new(core_api.FeedbackReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FeedbackArgs_Req_DEFAULT *core_api.FeedbackReq

func (p *FeedbackArgs) GetReq() *core_api.FeedbackReq {
	if !p.IsSetReq() {
		return FeedbackArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FeedbackArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FeedbackArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FeedbackResult struct {
	Success *core_api.FeedbackResp
}

var FeedbackResult_Success_DEFAULT *core_api.FeedbackResp

func (p *FeedbackResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FeedbackResult) Unmarshal(in []byte) error {
	msg := new(core_api.FeedbackResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FeedbackResult) GetSuccess() *core_api.FeedbackResp {
	if !p.IsSetSuccess() {
		return FeedbackResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FeedbackResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.FeedbackResp)
}

func (p *FeedbackResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FeedbackResult) GetResult() interface{} {
	return p.Success
}

func feedbackContentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.FeedbackReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).FeedbackContent(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FeedbackContentArgs:
		success, err := handler.(core_api.CoreApi).FeedbackContent(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FeedbackContentResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFeedbackContentArgs() interface{} {
	return &FeedbackContentArgs{}
}

func newFeedbackContentResult() interface{} {
	return &FeedbackContentResult{}
}

type FeedbackContentArgs struct {
	Req *core_api.FeedbackReq
}

func (p *FeedbackContentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FeedbackContentArgs) Unmarshal(in []byte) error {
	msg := new(core_api.FeedbackReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FeedbackContentArgs_Req_DEFAULT *core_api.FeedbackReq

func (p *FeedbackContentArgs) GetReq() *core_api.FeedbackReq {
	if !p.IsSetReq() {
		return FeedbackContentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FeedbackContentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FeedbackContentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FeedbackContentResult struct {
	Success *core_api.FeedbackResp
}

var FeedbackContentResult_Success_DEFAULT *core_api.FeedbackResp

func (p *FeedbackContentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FeedbackContentResult) Unmarshal(in []byte) error {
	msg := new(core_api.FeedbackResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FeedbackContentResult) GetSuccess() *core_api.FeedbackResp {
	if !p.IsSetSuccess() {
		return FeedbackContentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FeedbackContentResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.FeedbackResp)
}

func (p *FeedbackContentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FeedbackContentResult) GetResult() interface{} {
	return p.Success
}

func sendVerifyCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SendVerifyCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).SendVerifyCode(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SendVerifyCodeArgs:
		success, err := handler.(core_api.CoreApi).SendVerifyCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendVerifyCodeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSendVerifyCodeArgs() interface{} {
	return &SendVerifyCodeArgs{}
}

func newSendVerifyCodeResult() interface{} {
	return &SendVerifyCodeResult{}
}

type SendVerifyCodeArgs struct {
	Req *core_api.SendVerifyCodeReq
}

func (p *SendVerifyCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendVerifyCodeArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SendVerifyCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendVerifyCodeArgs_Req_DEFAULT *core_api.SendVerifyCodeReq

func (p *SendVerifyCodeArgs) GetReq() *core_api.SendVerifyCodeReq {
	if !p.IsSetReq() {
		return SendVerifyCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendVerifyCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendVerifyCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendVerifyCodeResult struct {
	Success *core_api.SendVerifyCodeResp
}

var SendVerifyCodeResult_Success_DEFAULT *core_api.SendVerifyCodeResp

func (p *SendVerifyCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendVerifyCodeResult) Unmarshal(in []byte) error {
	msg := new(core_api.SendVerifyCodeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendVerifyCodeResult) GetSuccess() *core_api.SendVerifyCodeResp {
	if !p.IsSetSuccess() {
		return SendVerifyCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendVerifyCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SendVerifyCodeResp)
}

func (p *SendVerifyCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendVerifyCodeResult) GetResult() interface{} {
	return p.Success
}

func basicUserRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.BasicUserRegisterReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).BasicUserRegister(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BasicUserRegisterArgs:
		success, err := handler.(core_api.CoreApi).BasicUserRegister(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BasicUserRegisterResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBasicUserRegisterArgs() interface{} {
	return &BasicUserRegisterArgs{}
}

func newBasicUserRegisterResult() interface{} {
	return &BasicUserRegisterResult{}
}

type BasicUserRegisterArgs struct {
	Req *core_api.BasicUserRegisterReq
}

func (p *BasicUserRegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BasicUserRegisterArgs) Unmarshal(in []byte) error {
	msg := new(core_api.BasicUserRegisterReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BasicUserRegisterArgs_Req_DEFAULT *core_api.BasicUserRegisterReq

func (p *BasicUserRegisterArgs) GetReq() *core_api.BasicUserRegisterReq {
	if !p.IsSetReq() {
		return BasicUserRegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BasicUserRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BasicUserRegisterArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BasicUserRegisterResult struct {
	Success *core_api.BasicUserRegisterResp
}

var BasicUserRegisterResult_Success_DEFAULT *core_api.BasicUserRegisterResp

func (p *BasicUserRegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BasicUserRegisterResult) Unmarshal(in []byte) error {
	msg := new(core_api.BasicUserRegisterResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BasicUserRegisterResult) GetSuccess() *core_api.BasicUserRegisterResp {
	if !p.IsSetSuccess() {
		return BasicUserRegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BasicUserRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.BasicUserRegisterResp)
}

func (p *BasicUserRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BasicUserRegisterResult) GetResult() interface{} {
	return p.Success
}

func basicUserLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.BasicUserLoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).BasicUserLogin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BasicUserLoginArgs:
		success, err := handler.(core_api.CoreApi).BasicUserLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BasicUserLoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBasicUserLoginArgs() interface{} {
	return &BasicUserLoginArgs{}
}

func newBasicUserLoginResult() interface{} {
	return &BasicUserLoginResult{}
}

type BasicUserLoginArgs struct {
	Req *core_api.BasicUserLoginReq
}

func (p *BasicUserLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BasicUserLoginArgs) Unmarshal(in []byte) error {
	msg := new(core_api.BasicUserLoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BasicUserLoginArgs_Req_DEFAULT *core_api.BasicUserLoginReq

func (p *BasicUserLoginArgs) GetReq() *core_api.BasicUserLoginReq {
	if !p.IsSetReq() {
		return BasicUserLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BasicUserLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BasicUserLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BasicUserLoginResult struct {
	Success *core_api.BasicUserLoginResp
}

var BasicUserLoginResult_Success_DEFAULT *core_api.BasicUserLoginResp

func (p *BasicUserLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BasicUserLoginResult) Unmarshal(in []byte) error {
	msg := new(core_api.BasicUserLoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BasicUserLoginResult) GetSuccess() *core_api.BasicUserLoginResp {
	if !p.IsSetSuccess() {
		return BasicUserLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BasicUserLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.BasicUserLoginResp)
}

func (p *BasicUserLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BasicUserLoginResult) GetResult() interface{} {
	return p.Success
}

func basicUserResetPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.BasicUserResetPasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).BasicUserResetPassword(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BasicUserResetPasswordArgs:
		success, err := handler.(core_api.CoreApi).BasicUserResetPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BasicUserResetPasswordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBasicUserResetPasswordArgs() interface{} {
	return &BasicUserResetPasswordArgs{}
}

func newBasicUserResetPasswordResult() interface{} {
	return &BasicUserResetPasswordResult{}
}

type BasicUserResetPasswordArgs struct {
	Req *core_api.BasicUserResetPasswordReq
}

func (p *BasicUserResetPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BasicUserResetPasswordArgs) Unmarshal(in []byte) error {
	msg := new(core_api.BasicUserResetPasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BasicUserResetPasswordArgs_Req_DEFAULT *core_api.BasicUserResetPasswordReq

func (p *BasicUserResetPasswordArgs) GetReq() *core_api.BasicUserResetPasswordReq {
	if !p.IsSetReq() {
		return BasicUserResetPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BasicUserResetPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BasicUserResetPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BasicUserResetPasswordResult struct {
	Success *core_api.BasicUserRegisterResp
}

var BasicUserResetPasswordResult_Success_DEFAULT *core_api.BasicUserRegisterResp

func (p *BasicUserResetPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BasicUserResetPasswordResult) Unmarshal(in []byte) error {
	msg := new(core_api.BasicUserRegisterResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BasicUserResetPasswordResult) GetSuccess() *core_api.BasicUserRegisterResp {
	if !p.IsSetSuccess() {
		return BasicUserResetPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BasicUserResetPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.BasicUserRegisterResp)
}

func (p *BasicUserResetPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BasicUserResetPasswordResult) GetResult() interface{} {
	return p.Success
}

func basicUserUpdateProfileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.BasicUserUpdateProfileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).BasicUserUpdateProfile(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BasicUserUpdateProfileArgs:
		success, err := handler.(core_api.CoreApi).BasicUserUpdateProfile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BasicUserUpdateProfileResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBasicUserUpdateProfileArgs() interface{} {
	return &BasicUserUpdateProfileArgs{}
}

func newBasicUserUpdateProfileResult() interface{} {
	return &BasicUserUpdateProfileResult{}
}

type BasicUserUpdateProfileArgs struct {
	Req *core_api.BasicUserUpdateProfileReq
}

func (p *BasicUserUpdateProfileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BasicUserUpdateProfileArgs) Unmarshal(in []byte) error {
	msg := new(core_api.BasicUserUpdateProfileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BasicUserUpdateProfileArgs_Req_DEFAULT *core_api.BasicUserUpdateProfileReq

func (p *BasicUserUpdateProfileArgs) GetReq() *core_api.BasicUserUpdateProfileReq {
	if !p.IsSetReq() {
		return BasicUserUpdateProfileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BasicUserUpdateProfileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BasicUserUpdateProfileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BasicUserUpdateProfileResult struct {
	Success *core_api.BasicUserUpdateProfileResp
}

var BasicUserUpdateProfileResult_Success_DEFAULT *core_api.BasicUserUpdateProfileResp

func (p *BasicUserUpdateProfileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BasicUserUpdateProfileResult) Unmarshal(in []byte) error {
	msg := new(core_api.BasicUserUpdateProfileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BasicUserUpdateProfileResult) GetSuccess() *core_api.BasicUserUpdateProfileResp {
	if !p.IsSetSuccess() {
		return BasicUserUpdateProfileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BasicUserUpdateProfileResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.BasicUserUpdateProfileResp)
}

func (p *BasicUserUpdateProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BasicUserUpdateProfileResult) GetResult() interface{} {
	return p.Success
}

func thirdPartyLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ThirdPartyLoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).ThirdPartyLogin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ThirdPartyLoginArgs:
		success, err := handler.(core_api.CoreApi).ThirdPartyLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ThirdPartyLoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newThirdPartyLoginArgs() interface{} {
	return &ThirdPartyLoginArgs{}
}

func newThirdPartyLoginResult() interface{} {
	return &ThirdPartyLoginResult{}
}

type ThirdPartyLoginArgs struct {
	Req *core_api.ThirdPartyLoginReq
}

func (p *ThirdPartyLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ThirdPartyLoginArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ThirdPartyLoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ThirdPartyLoginArgs_Req_DEFAULT *core_api.ThirdPartyLoginReq

func (p *ThirdPartyLoginArgs) GetReq() *core_api.ThirdPartyLoginReq {
	if !p.IsSetReq() {
		return ThirdPartyLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ThirdPartyLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ThirdPartyLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ThirdPartyLoginResult struct {
	Success *core_api.ThirdPartyLoginResp
}

var ThirdPartyLoginResult_Success_DEFAULT *core_api.ThirdPartyLoginResp

func (p *ThirdPartyLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ThirdPartyLoginResult) Unmarshal(in []byte) error {
	msg := new(core_api.ThirdPartyLoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ThirdPartyLoginResult) GetSuccess() *core_api.ThirdPartyLoginResp {
	if !p.IsSetSuccess() {
		return ThirdPartyLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ThirdPartyLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ThirdPartyLoginResp)
}

func (p *ThirdPartyLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ThirdPartyLoginResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Completions(ctx context.Context, req *core_api.CompletionsReq) (CoreApi_CompletionsClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "Completions", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &coreApiCompletionsClient{res.Stream}

	if err := stream.Stream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}

func (p *kClient) CreateConversation(ctx context.Context, Req *core_api.CreateConversationReq) (r *core_api.CreateConversationResp, err error) {
	var _args CreateConversationArgs
	_args.Req = Req
	var _result CreateConversationResult
	if err = p.c.Call(ctx, "CreateConversation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListConversation(ctx context.Context, Req *core_api.ListConversationReq) (r *core_api.ListConversationResp, err error) {
	var _args ListConversationArgs
	_args.Req = Req
	var _result ListConversationResult
	if err = p.c.Call(ctx, "ListConversation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetConversation(ctx context.Context, Req *core_api.GetConversationReq) (r *core_api.GetConversationResp, err error) {
	var _args GetConversationArgs
	_args.Req = Req
	var _result GetConversationResult
	if err = p.c.Call(ctx, "GetConversation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Generate(ctx context.Context, Req *core_api.GenerateBriefReq) (r *core_api.GenerateBriefResp, err error) {
	var _args GenerateArgs
	_args.Req = Req
	var _result GenerateResult
	if err = p.c.Call(ctx, "Generate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RenameConversation(ctx context.Context, Req *core_api.RenameConversationReq) (r *core_api.RenameConversationResp, err error) {
	var _args RenameConversationArgs
	_args.Req = Req
	var _result RenameConversationResult
	if err = p.c.Call(ctx, "RenameConversation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteConversation(ctx context.Context, Req *core_api.DeleteConversationReq) (r *core_api.DeleteConversationResp, err error) {
	var _args DeleteConversationArgs
	_args.Req = Req
	var _result DeleteConversationResult
	if err = p.c.Call(ctx, "DeleteConversation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchConversation(ctx context.Context, Req *core_api.SearchConversationReq) (r *core_api.SearchConversationResp, err error) {
	var _args SearchConversationArgs
	_args.Req = Req
	var _result SearchConversationResult
	if err = p.c.Call(ctx, "SearchConversation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListAgents(ctx context.Context, Req *core_api.ListAgentsReq) (r *core_api.ListAgentsResp, err error) {
	var _args ListAgentsArgs
	_args.Req = Req
	var _result ListAgentsResult
	if err = p.c.Call(ctx, "ListAgents", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Feedback(ctx context.Context, Req *core_api.FeedbackReq) (r *core_api.FeedbackResp, err error) {
	var _args FeedbackArgs
	_args.Req = Req
	var _result FeedbackResult
	if err = p.c.Call(ctx, "Feedback", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FeedbackContent(ctx context.Context, Req *core_api.FeedbackReq) (r *core_api.FeedbackResp, err error) {
	var _args FeedbackContentArgs
	_args.Req = Req
	var _result FeedbackContentResult
	if err = p.c.Call(ctx, "FeedbackContent", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendVerifyCode(ctx context.Context, Req *core_api.SendVerifyCodeReq) (r *core_api.SendVerifyCodeResp, err error) {
	var _args SendVerifyCodeArgs
	_args.Req = Req
	var _result SendVerifyCodeResult
	if err = p.c.Call(ctx, "SendVerifyCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BasicUserRegister(ctx context.Context, Req *core_api.BasicUserRegisterReq) (r *core_api.BasicUserRegisterResp, err error) {
	var _args BasicUserRegisterArgs
	_args.Req = Req
	var _result BasicUserRegisterResult
	if err = p.c.Call(ctx, "BasicUserRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BasicUserLogin(ctx context.Context, Req *core_api.BasicUserLoginReq) (r *core_api.BasicUserLoginResp, err error) {
	var _args BasicUserLoginArgs
	_args.Req = Req
	var _result BasicUserLoginResult
	if err = p.c.Call(ctx, "BasicUserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BasicUserResetPassword(ctx context.Context, Req *core_api.BasicUserResetPasswordReq) (r *core_api.BasicUserRegisterResp, err error) {
	var _args BasicUserResetPasswordArgs
	_args.Req = Req
	var _result BasicUserResetPasswordResult
	if err = p.c.Call(ctx, "BasicUserResetPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BasicUserUpdateProfile(ctx context.Context, Req *core_api.BasicUserUpdateProfileReq) (r *core_api.BasicUserUpdateProfileResp, err error) {
	var _args BasicUserUpdateProfileArgs
	_args.Req = Req
	var _result BasicUserUpdateProfileResult
	if err = p.c.Call(ctx, "BasicUserUpdateProfile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ThirdPartyLogin(ctx context.Context, Req *core_api.ThirdPartyLoginReq) (r *core_api.ThirdPartyLoginResp, err error) {
	var _args ThirdPartyLoginArgs
	_args.Req = Req
	var _result ThirdPartyLoginResult
	if err = p.c.Call(ctx, "ThirdPartyLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
