// Code generated by Kitex v0.15.2. DO NOT EDIT.

package coreapi

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	streamcall "github.com/cloudwego/kitex/client/callopt/streamcall"
	streamclient "github.com/cloudwego/kitex/client/streamclient"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	transport "github.com/cloudwego/kitex/transport"
	core_api "github.com/xh-polaris/innospark-idl/kitex_gen/core_api"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Completions(ctx context.Context, Req *core_api.CompletionsReq, callOptions ...callopt.Option) (stream CoreApi_CompletionsClient, err error)
	CreateConversation(ctx context.Context, Req *core_api.CreateConversationReq, callOptions ...callopt.Option) (r *core_api.CreateConversationResp, err error)
	ListConversation(ctx context.Context, Req *core_api.ListConversationReq, callOptions ...callopt.Option) (r *core_api.ListConversationResp, err error)
	GetConversation(ctx context.Context, Req *core_api.GetConversationReq, callOptions ...callopt.Option) (r *core_api.GetConversationResp, err error)
	Generate(ctx context.Context, Req *core_api.GenerateBriefReq, callOptions ...callopt.Option) (r *core_api.GenerateBriefResp, err error)
	RenameConversation(ctx context.Context, Req *core_api.RenameConversationReq, callOptions ...callopt.Option) (r *core_api.RenameConversationResp, err error)
	DeleteConversation(ctx context.Context, Req *core_api.DeleteConversationReq, callOptions ...callopt.Option) (r *core_api.DeleteConversationResp, err error)
	SearchConversation(ctx context.Context, Req *core_api.SearchConversationReq, callOptions ...callopt.Option) (r *core_api.SearchConversationResp, err error)
	ListAgents(ctx context.Context, Req *core_api.ListAgentsReq, callOptions ...callopt.Option) (r *core_api.ListAgentsResp, err error)
	Feedback(ctx context.Context, Req *core_api.FeedbackReq, callOptions ...callopt.Option) (r *core_api.FeedbackResp, err error)
	SendVerifyCode(ctx context.Context, Req *core_api.SendVerifyCodeReq, callOptions ...callopt.Option) (r *core_api.SendVerifyCodeResp, err error)
	BasicUserRegister(ctx context.Context, Req *core_api.BasicUserRegisterReq, callOptions ...callopt.Option) (r *core_api.BasicUserRegisterResp, err error)
	BasicUserLogin(ctx context.Context, Req *core_api.BasicUserLoginReq, callOptions ...callopt.Option) (r *core_api.BasicUserLoginResp, err error)
	BasicUserResetPassword(ctx context.Context, Req *core_api.BasicUserResetPasswordReq, callOptions ...callopt.Option) (r *core_api.BasicUserRegisterResp, err error)
	ThirdPartyLogin(ctx context.Context, Req *core_api.ThirdPartyLoginReq, callOptions ...callopt.Option) (r *core_api.ThirdPartyLoginResp, err error)
}

// StreamClient is designed to provide Interface for Streaming APIs.
type StreamClient interface {
	Completions(ctx context.Context, Req *core_api.CompletionsReq, callOptions ...streamcall.Option) (stream CoreApi_CompletionsClient, err error)
}

type CoreApi_CompletionsClient interface {
	streaming.Stream
	Recv() (*core_api.SSEEvent, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, client.WithTransportProtocol(transport.GRPC))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kCoreApiClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kCoreApiClient struct {
	*kClient
}

func (p *kCoreApiClient) Completions(ctx context.Context, Req *core_api.CompletionsReq, callOptions ...callopt.Option) (stream CoreApi_CompletionsClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Completions(ctx, Req)
}

func (p *kCoreApiClient) CreateConversation(ctx context.Context, Req *core_api.CreateConversationReq, callOptions ...callopt.Option) (r *core_api.CreateConversationResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateConversation(ctx, Req)
}

func (p *kCoreApiClient) ListConversation(ctx context.Context, Req *core_api.ListConversationReq, callOptions ...callopt.Option) (r *core_api.ListConversationResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListConversation(ctx, Req)
}

func (p *kCoreApiClient) GetConversation(ctx context.Context, Req *core_api.GetConversationReq, callOptions ...callopt.Option) (r *core_api.GetConversationResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetConversation(ctx, Req)
}

func (p *kCoreApiClient) Generate(ctx context.Context, Req *core_api.GenerateBriefReq, callOptions ...callopt.Option) (r *core_api.GenerateBriefResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Generate(ctx, Req)
}

func (p *kCoreApiClient) RenameConversation(ctx context.Context, Req *core_api.RenameConversationReq, callOptions ...callopt.Option) (r *core_api.RenameConversationResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RenameConversation(ctx, Req)
}

func (p *kCoreApiClient) DeleteConversation(ctx context.Context, Req *core_api.DeleteConversationReq, callOptions ...callopt.Option) (r *core_api.DeleteConversationResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteConversation(ctx, Req)
}

func (p *kCoreApiClient) SearchConversation(ctx context.Context, Req *core_api.SearchConversationReq, callOptions ...callopt.Option) (r *core_api.SearchConversationResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchConversation(ctx, Req)
}

func (p *kCoreApiClient) ListAgents(ctx context.Context, Req *core_api.ListAgentsReq, callOptions ...callopt.Option) (r *core_api.ListAgentsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListAgents(ctx, Req)
}

func (p *kCoreApiClient) Feedback(ctx context.Context, Req *core_api.FeedbackReq, callOptions ...callopt.Option) (r *core_api.FeedbackResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Feedback(ctx, Req)
}

func (p *kCoreApiClient) SendVerifyCode(ctx context.Context, Req *core_api.SendVerifyCodeReq, callOptions ...callopt.Option) (r *core_api.SendVerifyCodeResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendVerifyCode(ctx, Req)
}

func (p *kCoreApiClient) BasicUserRegister(ctx context.Context, Req *core_api.BasicUserRegisterReq, callOptions ...callopt.Option) (r *core_api.BasicUserRegisterResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BasicUserRegister(ctx, Req)
}

func (p *kCoreApiClient) BasicUserLogin(ctx context.Context, Req *core_api.BasicUserLoginReq, callOptions ...callopt.Option) (r *core_api.BasicUserLoginResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BasicUserLogin(ctx, Req)
}

func (p *kCoreApiClient) BasicUserResetPassword(ctx context.Context, Req *core_api.BasicUserResetPasswordReq, callOptions ...callopt.Option) (r *core_api.BasicUserRegisterResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BasicUserResetPassword(ctx, Req)
}

func (p *kCoreApiClient) ThirdPartyLogin(ctx context.Context, Req *core_api.ThirdPartyLoginReq, callOptions ...callopt.Option) (r *core_api.ThirdPartyLoginResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ThirdPartyLogin(ctx, Req)
}

// NewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
func NewStreamClient(destService string, opts ...streamclient.Option) (StreamClient, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))
	options = append(options, client.WithTransportProtocol(transport.GRPC))
	options = append(options, streamclient.GetClientOptions(opts)...)

	kc, err := client.NewClient(serviceInfoForStreamClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kCoreApiStreamClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
// It panics if any error occurs.
func MustNewStreamClient(destService string, opts ...streamclient.Option) StreamClient {
	kc, err := NewStreamClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kCoreApiStreamClient struct {
	*kClient
}

func (p *kCoreApiStreamClient) Completions(ctx context.Context, Req *core_api.CompletionsReq, callOptions ...streamcall.Option) (stream CoreApi_CompletionsClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.Completions(ctx, Req)
}
