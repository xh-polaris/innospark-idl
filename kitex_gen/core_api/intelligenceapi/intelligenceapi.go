// Code generated by Kitex v0.15.2. DO NOT EDIT.

package intelligenceapi

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "github.com/cloudwego/prutal"
	core_api "github.com/xh-polaris/innospark-idl/kitex_gen/core_api"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ListIntelligence": kitex.NewMethodInfo(
		listIntelligenceHandler,
		newListIntelligenceArgs,
		newListIntelligenceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetIntelligence": kitex.NewMethodInfo(
		getIntelligenceHandler,
		newGetIntelligenceArgs,
		newGetIntelligenceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	intelligenceApiServiceInfo                = NewServiceInfo()
	intelligenceApiServiceInfoForClient       = NewServiceInfoForClient()
	intelligenceApiServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return intelligenceApiServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return intelligenceApiServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return intelligenceApiServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "IntelligenceApi"
	handlerType := (*core_api.IntelligenceApi)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.15.2",
		Extra:           extra,
	}
	return svcInfo
}

func listIntelligenceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListIntelligenceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.IntelligenceApi).ListIntelligence(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListIntelligenceArgs:
		success, err := handler.(core_api.IntelligenceApi).ListIntelligence(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListIntelligenceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListIntelligenceArgs() interface{} {
	return &ListIntelligenceArgs{}
}

func newListIntelligenceResult() interface{} {
	return &ListIntelligenceResult{}
}

type ListIntelligenceArgs struct {
	Req *core_api.ListIntelligenceReq
}

func (p *ListIntelligenceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListIntelligenceArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListIntelligenceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListIntelligenceArgs_Req_DEFAULT *core_api.ListIntelligenceReq

func (p *ListIntelligenceArgs) GetReq() *core_api.ListIntelligenceReq {
	if !p.IsSetReq() {
		return ListIntelligenceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListIntelligenceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListIntelligenceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListIntelligenceResult struct {
	Success *core_api.ListIntelligenceResp
}

var ListIntelligenceResult_Success_DEFAULT *core_api.ListIntelligenceResp

func (p *ListIntelligenceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListIntelligenceResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListIntelligenceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListIntelligenceResult) GetSuccess() *core_api.ListIntelligenceResp {
	if !p.IsSetSuccess() {
		return ListIntelligenceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListIntelligenceResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListIntelligenceResp)
}

func (p *ListIntelligenceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListIntelligenceResult) GetResult() interface{} {
	return p.Success
}

func getIntelligenceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetIntelligenceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.IntelligenceApi).GetIntelligence(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetIntelligenceArgs:
		success, err := handler.(core_api.IntelligenceApi).GetIntelligence(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetIntelligenceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetIntelligenceArgs() interface{} {
	return &GetIntelligenceArgs{}
}

func newGetIntelligenceResult() interface{} {
	return &GetIntelligenceResult{}
}

type GetIntelligenceArgs struct {
	Req *core_api.GetIntelligenceReq
}

func (p *GetIntelligenceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetIntelligenceArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetIntelligenceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetIntelligenceArgs_Req_DEFAULT *core_api.GetIntelligenceReq

func (p *GetIntelligenceArgs) GetReq() *core_api.GetIntelligenceReq {
	if !p.IsSetReq() {
		return GetIntelligenceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetIntelligenceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetIntelligenceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetIntelligenceResult struct {
	Success *core_api.GetIntelligenceResp
}

var GetIntelligenceResult_Success_DEFAULT *core_api.GetIntelligenceResp

func (p *GetIntelligenceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetIntelligenceResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetIntelligenceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetIntelligenceResult) GetSuccess() *core_api.GetIntelligenceResp {
	if !p.IsSetSuccess() {
		return GetIntelligenceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetIntelligenceResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetIntelligenceResp)
}

func (p *GetIntelligenceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetIntelligenceResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ListIntelligence(ctx context.Context, Req *core_api.ListIntelligenceReq) (r *core_api.ListIntelligenceResp, err error) {
	var _args ListIntelligenceArgs
	_args.Req = Req
	var _result ListIntelligenceResult
	if err = p.c.Call(ctx, "ListIntelligence", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetIntelligence(ctx context.Context, Req *core_api.GetIntelligenceReq) (r *core_api.GetIntelligenceResp, err error) {
	var _args GetIntelligenceArgs
	_args.Req = Req
	var _result GetIntelligenceResult
	if err = p.c.Call(ctx, "GetIntelligence", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
