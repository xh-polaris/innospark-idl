// Code generated by Kitex v0.15.0. DO NOT EDIT.

package core_api

import (
	"github.com/xh-polaris/innospark-idl/kitex_gen/basic"

	"github.com/cloudwego/prutal"
)

// 单条消息
type Message struct {
	Content     string   `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"` // 消息内容, json字符串, 存放在text中
	ContentType int32    `protobuf:"varint,2,opt,name=contentType" json:"contentType,omitempty"`
	Attaches    []string `protobuf:"bytes,3,rep,name=attaches" json:"attaches,omitempty"`
	References  []string `protobuf:"bytes,4,rep,name=references" json:"references,omitempty"`
	Role        string   `protobuf:"bytes,5,opt,name=role" json:"role,omitempty"`
}

func (x *Message) Reset() { *x = Message{} }

func (x *Message) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Message) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *Message) GetAttaches() []string {
	if x != nil {
		return x.Attaches
	}
	return nil
}

func (x *Message) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *Message) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// 对话配置
type CompletionsOption struct {
	IsRegen         bool    `protobuf:"varint,1,opt,name=isRegen" json:"isRegen,omitempty"`                // 是否重新生成
	SelectedRegenId *string `protobuf:"bytes,2,opt,name=selectedRegenId" json:"selectedRegenId,omitempty"` // 选择生成的id
	WithSuggest     bool    `protobuf:"varint,3,opt,name=withSuggest" json:"withSuggest,omitempty"`        // 是否生成建议
	IsReplace       bool    `protobuf:"varint,4,opt,name=isReplace" json:"isReplace,omitempty"`            // 是否替换
	UseDeepThink    bool    `protobuf:"varint,5,opt,name=useDeepThink" json:"useDeepThink,omitempty"`      // 是否深度思考
	Stream          bool    `protobuf:"varint,6,opt,name=stream" json:"stream,omitempty"`                  // 是否流式
	WebSearch       *bool   `protobuf:"varint,7,opt,name=webSearch" json:"webSearch,omitempty"`            // 是否联网搜索
}

func (x *CompletionsOption) Reset() { *x = CompletionsOption{} }

func (x *CompletionsOption) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CompletionsOption) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CompletionsOption) GetIsRegen() bool {
	if x != nil {
		return x.IsRegen
	}
	return false
}

func (x *CompletionsOption) GetSelectedRegenId() string {
	if x != nil && x.SelectedRegenId != nil {
		return *x.SelectedRegenId
	}
	return ""
}

func (x *CompletionsOption) GetWithSuggest() bool {
	if x != nil {
		return x.WithSuggest
	}
	return false
}

func (x *CompletionsOption) GetIsReplace() bool {
	if x != nil {
		return x.IsReplace
	}
	return false
}

func (x *CompletionsOption) GetUseDeepThink() bool {
	if x != nil {
		return x.UseDeepThink
	}
	return false
}

func (x *CompletionsOption) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *CompletionsOption) GetWebSearch() bool {
	if x != nil && x.WebSearch != nil {
		return *x.WebSearch
	}
	return false
}

type Ext struct {
	BotState string  `protobuf:"bytes,1,opt,name=bot_state" json:"bot_state,omitempty"` // json string, 对应EventModel
	Brief    string  `protobuf:"bytes,2,opt,name=brief" json:"brief,omitempty"`
	Think    string  `protobuf:"bytes,3,opt,name=think" json:"think,omitempty"`
	Suggest  string  `protobuf:"bytes,4,opt,name=suggest" json:"suggest,omitempty"`
	Cite     []*Cite `protobuf:"bytes,5,rep,name=cite" json:"cite,omitempty"`
	Code     []*Code `protobuf:"bytes,6,rep,name=code" json:"code,omitempty"`
}

func (x *Ext) Reset() { *x = Ext{} }

func (x *Ext) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Ext) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Ext) GetBotState() string {
	if x != nil {
		return x.BotState
	}
	return ""
}

func (x *Ext) GetBrief() string {
	if x != nil {
		return x.Brief
	}
	return ""
}

func (x *Ext) GetThink() string {
	if x != nil {
		return x.Think
	}
	return ""
}

func (x *Ext) GetSuggest() string {
	if x != nil {
		return x.Suggest
	}
	return ""
}

func (x *Ext) GetCite() []*Cite {
	if x != nil {
		return x.Cite
	}
	return nil
}

func (x *Ext) GetCode() []*Code {
	if x != nil {
		return x.Code
	}
	return nil
}

type Cite struct {
	Index         int32  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Url           string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Snippet       string `protobuf:"bytes,4,opt,name=snippet" json:"snippet,omitempty"`
	SiteName      string `protobuf:"bytes,5,opt,name=siteName" json:"siteName,omitempty"`
	SiteIcon      string `protobuf:"bytes,6,opt,name=siteIcon" json:"siteIcon,omitempty"`
	DatePublished string `protobuf:"bytes,7,opt,name=datePublished" json:"datePublished,omitempty"`
}

func (x *Cite) Reset() { *x = Cite{} }

func (x *Cite) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Cite) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Cite) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Cite) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cite) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Cite) GetSnippet() string {
	if x != nil {
		return x.Snippet
	}
	return ""
}

func (x *Cite) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *Cite) GetSiteIcon() string {
	if x != nil {
		return x.SiteIcon
	}
	return ""
}

func (x *Cite) GetDatePublished() string {
	if x != nil {
		return x.DatePublished
	}
	return ""
}

type Code struct {
	Index    int32  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	CodeType string `protobuf:"bytes,2,opt,name=codeType" json:"codeType,omitempty"`
	Code     string `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
}

func (x *Code) Reset() { *x = Code{} }

func (x *Code) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Code) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Code) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Code) GetCodeType() string {
	if x != nil {
		return x.CodeType
	}
	return ""
}

func (x *Code) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type FullMessage struct {
	ConversationId string  `protobuf:"bytes,1,opt,name=conversationId" json:"conversationId,omitempty"`
	SectionId      string  `protobuf:"bytes,2,opt,name=sectionId" json:"sectionId,omitempty"`
	MessageId      string  `protobuf:"bytes,3,opt,name=messageId" json:"messageId,omitempty"`
	Index          int32   `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
	ReplyId        *string `protobuf:"bytes,5,opt,name=replyId" json:"replyId,omitempty"` // 回复id
	Status         int32   `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`  // 状态, 目前默认0
	CreateTime     int64   `protobuf:"varint,7,opt,name=createTime" json:"createTime,omitempty"`
	MessageType    int32   `protobuf:"varint,8,opt,name=messageType" json:"messageType,omitempty"`
	ContentType    int32   `protobuf:"varint,9,opt,name=contentType" json:"contentType,omitempty"`
	Content        string  `protobuf:"bytes,10,opt,name=content" json:"content,omitempty"` // json string
	Ext            *Ext    `protobuf:"bytes,11,opt,name=ext" json:"ext,omitempty"`
	Feedback       int32   `protobuf:"varint,12,opt,name=feedback" json:"feedback,omitempty"` // 反馈类型
	UserType       int32   `protobuf:"varint,13,opt,name=userType" json:"userType,omitempty"` // 用户类型, 如system, assistant, user
}

func (x *FullMessage) Reset() { *x = FullMessage{} }

func (x *FullMessage) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *FullMessage) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *FullMessage) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *FullMessage) GetSectionId() string {
	if x != nil {
		return x.SectionId
	}
	return ""
}

func (x *FullMessage) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *FullMessage) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FullMessage) GetReplyId() string {
	if x != nil && x.ReplyId != nil {
		return *x.ReplyId
	}
	return ""
}

func (x *FullMessage) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FullMessage) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *FullMessage) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *FullMessage) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *FullMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *FullMessage) GetExt() *Ext {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *FullMessage) GetFeedback() int32 {
	if x != nil {
		return x.Feedback
	}
	return 0
}

func (x *FullMessage) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

// SSEEvent
type SSEEvent struct {
	EventData string `protobuf:"bytes,1,opt,name=eventData" json:"eventData,omitempty"`  // 事件数据
	EventId   int32  `protobuf:"varint,2,opt,name=eventId" json:"eventId,omitempty"`     // 事件id
	EventType int32  `protobuf:"varint,3,opt,name=eventType" json:"eventType,omitempty"` // 事件类型
}

func (x *SSEEvent) Reset() { *x = SSEEvent{} }

func (x *SSEEvent) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SSEEvent) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SSEEvent) GetEventData() string {
	if x != nil {
		return x.EventData
	}
	return ""
}

func (x *SSEEvent) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *SSEEvent) GetEventType() int32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

// 消息元数据
type EventMeta struct {
	MessageId        string `protobuf:"bytes,1,opt,name=messageId" json:"messageId,omitempty"`                // 消息id
	ConversationId   string `protobuf:"bytes,2,opt,name=conversationId" json:"conversationId,omitempty"`      // 对话id
	SectionId        string `protobuf:"bytes,3,opt,name=sectionId" json:"sectionId,omitempty"`                // 段id
	MessageIndex     int32  `protobuf:"varint,4,opt,name=messageIndex" json:"messageIndex,omitempty"`         // 消息索引
	ConversationType int32  `protobuf:"varint,5,opt,name=conversationType" json:"conversationType,omitempty"` // 对话类型
}

func (x *EventMeta) Reset() { *x = EventMeta{} }

func (x *EventMeta) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *EventMeta) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *EventMeta) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *EventMeta) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *EventMeta) GetSectionId() string {
	if x != nil {
		return x.SectionId
	}
	return ""
}

func (x *EventMeta) GetMessageIndex() int32 {
	if x != nil {
		return x.MessageIndex
	}
	return 0
}

func (x *EventMeta) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

// 模型信息
type EventModel struct {
	Model   string `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`     // 模型id
	BotId   string `protobuf:"bytes,2,opt,name=botId" json:"botId,omitempty"`     // 智能体id
	BotName string `protobuf:"bytes,3,opt,name=botName" json:"botName,omitempty"` // 模型名称
}

func (x *EventModel) Reset() { *x = EventModel{} }

func (x *EventModel) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *EventModel) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *EventModel) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *EventModel) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *EventModel) GetBotName() string {
	if x != nil {
		return x.BotName
	}
	return ""
}

// 模型内容
type EventChat struct {
	Message          *EventChat_Message `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`                    // 消息内容
	MessageId        string             `protobuf:"bytes,2,opt,name=messageId" json:"messageId,omitempty"`                // 消息id
	ConversationId   string             `protobuf:"bytes,3,opt,name=conversationId" json:"conversationId,omitempty"`      // 对话id
	SectionId        string             `protobuf:"bytes,4,opt,name=sectionId" json:"sectionId,omitempty"`                // 段id
	ReplyId          string             `protobuf:"bytes,5,opt,name=replyId" json:"replyId,omitempty"`                    // 回复id
	IsDelta          bool               `protobuf:"varint,6,opt,name=isDelta" json:"isDelta,omitempty"`                   // 是否增量
	Status           int32              `protobuf:"varint,7,opt,name=status" json:"status,omitempty"`                     // 状态
	InputContentType int32              `protobuf:"varint,8,opt,name=inputContentType" json:"inputContentType,omitempty"` // 输入内容类型
	MessageIndex     int32              `protobuf:"varint,9,opt,name=messageIndex" json:"messageIndex,omitempty"`         // 消息索引
	BotId            string             `protobuf:"bytes,10,opt,name=botId" json:"botId,omitempty"`                       // 模型id
}

func (x *EventChat) Reset() { *x = EventChat{} }

func (x *EventChat) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *EventChat) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *EventChat) GetMessage() *EventChat_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *EventChat) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *EventChat) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *EventChat) GetSectionId() string {
	if x != nil {
		return x.SectionId
	}
	return ""
}

func (x *EventChat) GetReplyId() string {
	if x != nil {
		return x.ReplyId
	}
	return ""
}

func (x *EventChat) GetIsDelta() bool {
	if x != nil {
		return x.IsDelta
	}
	return false
}

func (x *EventChat) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EventChat) GetInputContentType() int32 {
	if x != nil {
		return x.InputContentType
	}
	return 0
}

func (x *EventChat) GetMessageIndex() int32 {
	if x != nil {
		return x.MessageIndex
	}
	return 0
}

func (x *EventChat) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

type EventChat_Message struct {
	// 模型增量返回的简要消息
	Content     string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	ContentType int32  `protobuf:"varint,2,opt,name=contentType" json:"contentType,omitempty"`
}

func (x *EventChat_Message) Reset() { *x = EventChat_Message{} }

func (x *EventChat_Message) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *EventChat_Message) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *EventChat_Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *EventChat_Message) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

// 结束
type EventEnd struct {
}

func (x *EventEnd) Reset() { *x = EventEnd{} }

func (x *EventEnd) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *EventEnd) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

// 对话
type Conversation struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversationId" json:"conversationId,omitempty"`
	Brief          string `protobuf:"bytes,2,opt,name=brief" json:"brief,omitempty"`
	CreateTime     int64  `protobuf:"varint,3,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime     int64  `protobuf:"varint,4,opt,name=updateTime" json:"updateTime,omitempty"`
}

func (x *Conversation) Reset() { *x = Conversation{} }

func (x *Conversation) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Conversation) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Conversation) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *Conversation) GetBrief() string {
	if x != nil {
		return x.Brief
	}
	return ""
}

func (x *Conversation) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Conversation) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 模型对话请求
type CompletionsReq struct {
	Messages          []*Message         `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`                   // 用户输入消息, 长度应为1
	CompletionsOption *CompletionsOption `protobuf:"bytes,2,opt,name=completionsOption" json:"completionsOption,omitempty"` // 对话配置
	Model             string             `protobuf:"bytes,3,opt,name=model" json:"model,omitempty"`                         // 使用的模型
	ConversationId    string             `protobuf:"bytes,4,opt,name=conversationId" json:"conversationId,omitempty"`       // 对话id
	ReplyId           *string            `protobuf:"bytes,5,opt,name=replyId" json:"replyId,omitempty"`                     // 回复id
	BotId             string             `protobuf:"bytes,6,opt,name=botId" json:"botId,omitempty"`                         // 智能体id
}

func (x *CompletionsReq) Reset() { *x = CompletionsReq{} }

func (x *CompletionsReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CompletionsReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CompletionsReq) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *CompletionsReq) GetCompletionsOption() *CompletionsOption {
	if x != nil {
		return x.CompletionsOption
	}
	return nil
}

func (x *CompletionsReq) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CompletionsReq) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *CompletionsReq) GetReplyId() string {
	if x != nil && x.ReplyId != nil {
		return *x.ReplyId
	}
	return ""
}

func (x *CompletionsReq) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

// 创建对话
type CreateConversationReq struct {
}

func (x *CreateConversationReq) Reset() { *x = CreateConversationReq{} }

func (x *CreateConversationReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *CreateConversationReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

type CreateConversationResp struct {
	ConversationId string          `protobuf:"bytes,1,opt,name=conversationId" json:"conversationId,omitempty"`
	Resp           *basic.Response `protobuf:"bytes,2,opt,name=resp" json:"resp,omitempty"`
}

func (x *CreateConversationResp) Reset() { *x = CreateConversationResp{} }

func (x *CreateConversationResp) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *CreateConversationResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CreateConversationResp) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *CreateConversationResp) GetResp() *basic.Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

// 获取历史记录请求
type ListConversationReq struct {
	Page *basic.Page `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
}

func (x *ListConversationReq) Reset() { *x = ListConversationReq{} }

func (x *ListConversationReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListConversationReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListConversationReq) GetPage() *basic.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListConversationResp struct {
	Resp          *basic.Response `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
	Conversations []*Conversation `protobuf:"bytes,2,rep,name=conversations" json:"conversations,omitempty"`
	HasMore       bool            `protobuf:"varint,3,opt,name=hasMore" json:"hasMore,omitempty"`
	Cursor        string          `protobuf:"bytes,4,opt,name=cursor" json:"cursor,omitempty"`
}

func (x *ListConversationResp) Reset() { *x = ListConversationResp{} }

func (x *ListConversationResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListConversationResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListConversationResp) GetResp() *basic.Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *ListConversationResp) GetConversations() []*Conversation {
	if x != nil {
		return x.Conversations
	}
	return nil
}

func (x *ListConversationResp) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *ListConversationResp) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

// 获取历史记录
type GetConversationReq struct {
	Page           *basic.Page `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
	ConversationId string      `protobuf:"bytes,2,opt,name=conversationId" json:"conversationId,omitempty"`
}

func (x *GetConversationReq) Reset() { *x = GetConversationReq{} }

func (x *GetConversationReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetConversationReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetConversationReq) GetPage() *basic.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetConversationReq) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

type GetConversationResp struct {
	Resp        *basic.Response `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
	MessageList []*FullMessage  `protobuf:"bytes,2,rep,name=messageList" json:"messageList,omitempty"`
	RegenList   []*FullMessage  `protobuf:"bytes,3,rep,name=regenList" json:"regenList,omitempty"`
	HasMore     bool            `protobuf:"varint,4,opt,name=hasMore" json:"hasMore,omitempty"`
	Cursor      string          `protobuf:"bytes,5,opt,name=cursor" json:"cursor,omitempty"`
}

func (x *GetConversationResp) Reset() { *x = GetConversationResp{} }

func (x *GetConversationResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetConversationResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetConversationResp) GetResp() *basic.Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *GetConversationResp) GetMessageList() []*FullMessage {
	if x != nil {
		return x.MessageList
	}
	return nil
}

func (x *GetConversationResp) GetRegenList() []*FullMessage {
	if x != nil {
		return x.RegenList
	}
	return nil
}

func (x *GetConversationResp) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *GetConversationResp) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

// 生成对话标题
type GenerateBriefReq struct {
	Messages       []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"` // 用户输入消息, 长度应为1
	ConversationId string     `protobuf:"bytes,2,opt,name=conversationId" json:"conversationId,omitempty"`
}

func (x *GenerateBriefReq) Reset() { *x = GenerateBriefReq{} }

func (x *GenerateBriefReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GenerateBriefReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GenerateBriefReq) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GenerateBriefReq) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

type GenerateBriefResp struct {
	Resp  *basic.Response `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
	Brief string          `protobuf:"bytes,2,opt,name=brief" json:"brief,omitempty"`
}

func (x *GenerateBriefResp) Reset() { *x = GenerateBriefResp{} }

func (x *GenerateBriefResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GenerateBriefResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GenerateBriefResp) GetResp() *basic.Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *GenerateBriefResp) GetBrief() string {
	if x != nil {
		return x.Brief
	}
	return ""
}

// 更新历史对话标题
type RenameConversationReq struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversationId" json:"conversationId,omitempty"`
	Brief          string `protobuf:"bytes,2,opt,name=brief" json:"brief,omitempty"`
}

func (x *RenameConversationReq) Reset() { *x = RenameConversationReq{} }

func (x *RenameConversationReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *RenameConversationReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *RenameConversationReq) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *RenameConversationReq) GetBrief() string {
	if x != nil {
		return x.Brief
	}
	return ""
}

type RenameConversationResp struct {
	Resp *basic.Response `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
}

func (x *RenameConversationResp) Reset() { *x = RenameConversationResp{} }

func (x *RenameConversationResp) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *RenameConversationResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *RenameConversationResp) GetResp() *basic.Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

// 删除历史记录
type DeleteConversationReq struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversationId" json:"conversationId,omitempty"`
}

func (x *DeleteConversationReq) Reset() { *x = DeleteConversationReq{} }

func (x *DeleteConversationReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *DeleteConversationReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *DeleteConversationReq) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

type DeleteConversationResp struct {
	Resp *basic.Response `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
}

func (x *DeleteConversationResp) Reset() { *x = DeleteConversationResp{} }

func (x *DeleteConversationResp) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *DeleteConversationResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *DeleteConversationResp) GetResp() *basic.Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

// 查找历史记录
type SearchConversationReq struct {
	Key  string      `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Page *basic.Page `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (x *SearchConversationReq) Reset() { *x = SearchConversationReq{} }

func (x *SearchConversationReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *SearchConversationReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SearchConversationReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SearchConversationReq) GetPage() *basic.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type SearchConversationResp struct {
	Resp          *basic.Response `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
	Conversations []*Conversation `protobuf:"bytes,2,rep,name=conversations" json:"conversations,omitempty"`
	HasMore       bool            `protobuf:"varint,3,opt,name=hasMore" json:"hasMore,omitempty"`
	Cursor        string          `protobuf:"bytes,4,opt,name=cursor" json:"cursor,omitempty"`
}

func (x *SearchConversationResp) Reset() { *x = SearchConversationResp{} }

func (x *SearchConversationResp) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *SearchConversationResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SearchConversationResp) GetResp() *basic.Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *SearchConversationResp) GetConversations() []*Conversation {
	if x != nil {
		return x.Conversations
	}
	return nil
}

func (x *SearchConversationResp) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *SearchConversationResp) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

// 获取智能体列表
type ListAgentsReq struct {
	Page *basic.Page `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
}

func (x *ListAgentsReq) Reset() { *x = ListAgentsReq{} }

func (x *ListAgentsReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListAgentsReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListAgentsReq) GetPage() *basic.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListAgentsResp struct {
	Resp   *basic.Response         `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
	Agents []*ListAgentsResp_Agent `protobuf:"bytes,2,rep,name=agents" json:"agents,omitempty"`
}

func (x *ListAgentsResp) Reset() { *x = ListAgentsResp{} }

func (x *ListAgentsResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListAgentsResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListAgentsResp) GetResp() *basic.Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *ListAgentsResp) GetAgents() []*ListAgentsResp_Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

type ListAgentsResp_Agent struct {
	BotId          string `protobuf:"bytes,1,opt,name=botId" json:"botId,omitempty"`
	BotIcon        string `protobuf:"bytes,2,opt,name=botIcon" json:"botIcon,omitempty"`
	BotName        string `protobuf:"bytes,3,opt,name=botName" json:"botName,omitempty"`
	BotDescription string `protobuf:"bytes,4,opt,name=botDescription" json:"botDescription,omitempty"`
}

func (x *ListAgentsResp_Agent) Reset() { *x = ListAgentsResp_Agent{} }

func (x *ListAgentsResp_Agent) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListAgentsResp_Agent) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListAgentsResp_Agent) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *ListAgentsResp_Agent) GetBotIcon() string {
	if x != nil {
		return x.BotIcon
	}
	return ""
}

func (x *ListAgentsResp_Agent) GetBotName() string {
	if x != nil {
		return x.BotName
	}
	return ""
}

func (x *ListAgentsResp_Agent) GetBotDescription() string {
	if x != nil {
		return x.BotDescription
	}
	return ""
}

// 反馈, 包括点赞, 点踩, 删除等
type FeedbackReq struct {
	Action    int32                 `protobuf:"varint,1,opt,name=action" json:"action,omitempty"`
	MessageId string                `protobuf:"bytes,2,opt,name=messageId" json:"messageId,omitempty"`
	Feedback  *FeedbackReq_Feedback `protobuf:"bytes,3,opt,name=feedback" json:"feedback,omitempty"`
}

func (x *FeedbackReq) Reset() { *x = FeedbackReq{} }

func (x *FeedbackReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *FeedbackReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *FeedbackReq) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *FeedbackReq) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *FeedbackReq) GetFeedback() *FeedbackReq_Feedback {
	if x != nil {
		return x.Feedback
	}
	return nil
}

type FeedbackReq_Feedback struct {
	Type    int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (x *FeedbackReq_Feedback) Reset() { *x = FeedbackReq_Feedback{} }

func (x *FeedbackReq_Feedback) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *FeedbackReq_Feedback) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *FeedbackReq_Feedback) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FeedbackReq_Feedback) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type FeedbackResp struct {
	Resp *basic.Response `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
}

func (x *FeedbackResp) Reset() { *x = FeedbackResp{} }

func (x *FeedbackResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *FeedbackResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *FeedbackResp) GetResp() *basic.Response {
	if x != nil {
		return x.Resp
	}
	return nil
}
