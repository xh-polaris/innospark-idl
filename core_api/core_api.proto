syntax = "proto3";

package core_api;

option go_package = "core_api";

import "core_api/common.proto";
import "core_api/intelligence.proto";
import "basic/http.proto";

service CoreApi {
  rpc Completions(CompletionsReq) returns (stream SSEEvent){
    option(http.post) = "/v1/completions";
  }
  rpc CreateConversation(CreateConversationReq) returns (CreateConversationResp) {
    option(http.post) = "/conversation/create";
  }
  rpc ListConversation(ListConversationReq) returns (ListConversationResp) {
    option(http.post) = "/conversation/list";
  }
  rpc GetConversation(GetConversationReq) returns (GetConversationResp) {
    option(http.post) = "/conversation/get";
  }
  rpc Generate(GenerateBriefReq) returns (GenerateBriefResp) {
    option(http.post) = "/conversation/brief";
  }
  rpc RenameConversation(RenameConversationReq) returns (RenameConversationResp) {
    option(http.post) = "/conversation/rename";
  }
  rpc DeleteConversation(DeleteConversationReq) returns (DeleteConversationResp) {
    option(http.post) = "/conversation/delete";
  }
  rpc SearchConversation(SearchConversationReq) returns (SearchConversationResp) {
    option(http.post) = "/conversation/search";
  }
  rpc ListAgents(ListAgentsReq) returns (ListAgentsResp) {
    option(http.post) = "/agents/list";
  }
  rpc Feedback(FeedbackReq) returns (FeedbackResp) {
    option(http.post) = "/feedback";
  }
  rpc SendVerifyCode(SendVerifyCodeReq) returns (SendVerifyCodeResp) {
    option(http.post) = "/system/send_verify_code";
  }
  rpc BasicUserRegister (BasicUserRegisterReq) returns (BasicUserRegisterResp) {
    option(http.post) = "/basic_user/register";
  }
  rpc BasicUserLogin (BasicUserLoginReq) returns (BasicUserLoginResp) {
    option(http.post) = "/basic_user/login";
  }
  rpc BasicUserResetPassword (BasicUserResetPasswordReq) returns (BasicUserRegisterResp) {
    option(http.post) = "/basic_user/reset_password";
  }
  rpc ThirdPartyLogin (ThirdPartyLoginReq) returns (ThirdPartyLoginResp) {
    option(http.post) = "/thirdparty/login";
  }
}

service IntelligenceApi {
  rpc ListIntelligence(ListIntelligenceReq) returns(ListIntelligenceResp) {
    option(http.post) = "/intelligence/list";
  }
  rpc GetIntelligence(GetIntelligenceReq) returns (GetIntelligenceResp) {
    option(http.post) = "/intelligence/get";
  }
}